name: Deploy RPG Platform

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      source:
        description: 'Source repository that triggered this deployment'
        required: false
        default: 'manual'
        type: string
      sha:
        description: 'Commit SHA that triggered this deployment'
        required: false
        default: ''
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    environment: production

    steps:
      - name: Show deployment trigger info
        run: |
          echo "🚀 Starting deployment..."
          echo "Triggered by: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Source: ${{ inputs.source }}"
            echo "SHA: ${{ inputs.sha }}"
          else
            echo "Source: ${{ github.repository }}"
            echo "SHA: ${{ github.sha }}"
          fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Deploy infrastructure (if needed)
        run: |
          # Check if stack exists, deploy if not
          if ! aws cloudformation describe-stacks --stack-name rpg-gaming-platform --region us-west-2 >/dev/null 2>&1; then
            echo "Stack doesn't exist, deploying infrastructure..."
            aws cloudformation deploy \
              --template-file aws/cloudformation/rpg-infrastructure.yaml \
              --stack-name rpg-gaming-platform \
              --parameter-overrides \
                Environment=production \
                InstanceType=t3.micro \
                KeyPairName=${{ secrets.AWS_KEY_PAIR_NAME }} \
              --capabilities CAPABILITY_IAM \
              --region us-west-2 \
              --tags \
                Environment=production \
                Project=RPG-Gaming-Platform \
                Owner=github-actions
          else
            echo "Stack exists, skipping infrastructure deployment"
          fi

      - name: Get EC2 instance info
        id: get-instance
        run: |
          PUBLIC_IP=$(aws cloudformation describe-stacks \
            --stack-name rpg-gaming-platform \
            --region us-west-2 \
            --query 'Stacks[0].Outputs[?OutputKey==`PublicIP`].OutputValue' \
            --output text)
          
          INSTANCE_ID=$(aws cloudformation describe-stacks \
            --stack-name rpg-gaming-platform \
            --region us-west-2 \
            --query 'Stacks[0].Outputs[?OutputKey==`InstanceId`].OutputValue' \
            --output text)
          
          echo "public-ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
          echo "instance-id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Wait for SSM agent
        run: |
          echo "Waiting for SSM agent to be online..."
          for i in {1..30}; do
            if aws ssm describe-instance-information \
              --instance-information-filter-list key=InstanceIds,valueSet=${{ steps.get-instance.outputs.instance-id }} \
              --region us-west-2 \
              --query 'InstanceInformationList[0].PingStatus' \
              --output text | grep -q "Online"; then
              echo "SSM agent is online!"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 30
          done

      - name: Deploy application via SSM
        id: deploy-app
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --region us-west-2 \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "echo \"Starting deployment at $(date)\"",
              "cd /opt/rpg-deployment",
              "echo \"Pulling latest configuration...\"",
              "sudo -u ubuntu git fetch origin main",
              "sudo -u ubuntu git reset --hard origin/main",
              "echo \"Setting up environment...\"",
              "echo \"DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}\" > .env",
              "echo \"EMAIL=${{ secrets.SSL_EMAIL }}\" >> .env",
              "echo \"VITE_DISCORD_CLIENT_ID=${{ secrets.VITE_DISCORD_CLIENT_ID }}\" >> .env",
              "echo \"DISCORD_CLIENT_ID=${{ secrets.VITE_DISCORD_CLIENT_ID }}\" >> .env",
              "echo \"DISCORD_CLIENT_SECRET=${{ secrets.DISCORD_CLIENT_SECRET }}\" >> .env",
              "echo \"DISCORD_REDIRECT_URI=https://${{ secrets.DOMAIN_NAME }}\" >> .env",
              "echo \"Logging into GitHub Container Registry...\"",
              "echo \"${{ secrets.GITHUB_TOKEN }}\" | docker login ghcr.io -u ${{ github.actor }} --password-stdin",
              "echo \"Cleaning up existing deployment...\"",
              "docker compose -f docker-compose.prod.yml down -v --remove-orphans || true",
              "echo \"Removing any stopped containers...\"",
              "docker container prune -f || true",
              "echo \"Removing any dangling rpg containers...\"",
              "docker ps -a --filter \"name=rpg-\" --filter \"status=exited\" -q | xargs -r docker rm || true",
              "echo \"Cleaning up old images...\"",
              "docker image prune -f",
              "echo \"Pulling latest pre-built images...\"",
              "docker compose -f docker-compose.prod.yml pull",
              "echo \"Starting new containers...\"",
              "docker compose -f docker-compose.prod.yml up -d --build",
              "echo \"Waiting for services to be healthy...\"",
              "for i in {1..30}; do",
              "  echo \"Health check attempt $i/30...\"",
              "  healthy_count=$(docker ps --filter \"name=rpg-\" --filter \"health=healthy\" --format \"{{.Names}}\" | wc -l)",
              "  total_count=$(docker ps --filter \"name=rpg-\" --format \"{{.Names}}\" | wc -l)",
              "  echo \"Healthy services: $healthy_count/$total_count\"",
              "  docker ps --filter \"name=rpg-\" --format \"table {{.Names}}\\t{{.Status}}\"",
              "  if [ \"$healthy_count\" -ge 5 ]; then",
              "    echo \"✅ Core services are healthy!\"",
              "    break",
              "  fi",
              "  if [ $i -eq 30 ]; then",
              "    echo \"❌ Services failed to become healthy\"",
              "    docker compose -f docker-compose.prod.yml ps",
              "    echo \"Container logs:\"",
              "    docker compose -f docker-compose.prod.yml logs --tail=50",
              "    exit 1",
              "  fi",
              "  sleep 10",
              "done",
              "echo \"Final container status:\"",
              "docker compose -f docker-compose.prod.yml ps",
              "echo \"Deployment completed at $(date)\""
            ]' \
            --targets "Key=InstanceIds,Values=${{ steps.get-instance.outputs.instance-id }}" \
            --comment "Deploy RPG Platform from GitHub Actions" \
            --output text --query 'Command.CommandId')
          
          echo "command-id=$COMMAND_ID" >> $GITHUB_OUTPUT

      - name: Wait for deployment completion
        run: |
          echo "Waiting for deployment command to complete..."
          for i in {1..20}; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id ${{ steps.deploy-app.outputs.command-id }} \
              --instance-id ${{ steps.get-instance.outputs.instance-id }} \
              --region us-west-2 \
              --query 'Status' \
              --output text)
            
            if [ "$STATUS" = "Success" ]; then
              echo "✅ Deployment completed successfully!"
              break
            elif [ "$STATUS" = "Failed" ]; then
              echo "❌ Deployment failed!"
              aws ssm get-command-invocation \
                --command-id ${{ steps.deploy-app.outputs.command-id }} \
                --instance-id ${{ steps.get-instance.outputs.instance-id }} \
                --region us-west-2 \
                --query 'StandardErrorContent' \
                --output text
              exit 1
            fi
            
            echo "Status: $STATUS, waiting... ($i/20)"
            sleep 30
          done

      - name: Verify deployment
        run: |
          PUBLIC_IP="${{ steps.get-instance.outputs.public-ip }}"
          echo "🌐 Application URL: http://$PUBLIC_IP"
          echo "🔍 Checking health..."
          
          # Wait a bit more for services to fully start
          sleep 30
          
          # Check if the application is responding
          for i in {1..10}; do
            if curl -f -s "http://$PUBLIC_IP" > /dev/null; then
              echo "✅ Application is healthy!"
              echo "🌐 Access your RPG Platform at: http://$PUBLIC_IP"
              break
            fi
            echo "Waiting for application... ($i/10)"
            sleep 15
          done

      - name: Create deployment summary
        if: always()
        run: |
          PUBLIC_IP="${{ steps.get-instance.outputs.public-ip }}"
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Show what triggered this deployment
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "🎯 **Triggered by**: ${{ inputs.source }}" >> $GITHUB_STEP_SUMMARY
            echo "📝 **Source SHA**: ${{ inputs.sha }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "🎯 **Triggered by**: Direct push to ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
            echo "📝 **Source SHA**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ **Status**: Deployment successful!" >> $GITHUB_STEP_SUMMARY
            echo "🌐 **Application URL**: http://$PUBLIC_IP" >> $GITHUB_STEP_SUMMARY
            echo "📊 **Health Check**: http://$PUBLIC_IP/health" >> $GITHUB_STEP_SUMMARY
            echo "🐳 **Docker Images**: Pre-built images from GHCR" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status**: Deployment failed!" >> $GITHUB_STEP_SUMMARY
            echo "🔍 **Logs**: Check the job output for details" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pre-built Images Used**:" >> $GITHUB_STEP_SUMMARY
          echo "- API: \`ghcr.io/kirkdiggler/rpg-api:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- Web: \`ghcr.io/kirkdiggler/rpg-dnd5e-web:latest\`" >> $GITHUB_STEP_SUMMARY