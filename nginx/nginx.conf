events {
    worker_connections 1024;
}

http {
    upstream rpg_envoy {
        server rpg-envoy:8080;
    }

    upstream rpg_web {
        server rpg-web:80;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=web:10m rate=30r/s;

    # Main server block
    server {
        listen 80;
        server_name _;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";

        # gRPC-Web API routes (via Envoy proxy)
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            # Remove /api prefix and forward to Envoy proxy
            rewrite ^/api/(.*)$ /$1 break;
            
            proxy_pass http://rpg_envoy;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Required for gRPC-Web
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # React app (default route)
        location / {
            limit_req zone=web burst=50 nodelay;
            
            proxy_pass http://rpg_web;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Handle SPA routing
            try_files $uri $uri/ @fallback;
        }

        # SPA fallback for client-side routing
        location @fallback {
            proxy_pass http://rpg_web/index.html;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # HTTPS server (uncomment when you have SSL certificates)
    # server {
    #     listen 443 ssl http2;
    #     server_name your-domain.com;

    #     ssl_certificate /etc/nginx/certs/fullchain.pem;
    #     ssl_certificate_key /etc/nginx/certs/privkey.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;

    #     # Same location blocks as above
    #     location /api/ {
    #         # ... (same as HTTP version)
    #     }

    #     location / {
    #         # ... (same as HTTP version)
    #     }
    # }
}